var e = /* @__PURE__ */ ((t) => (t.Horizontal = "horizontal", t.Vertical = "vertical", t))(e || {}), r = /* @__PURE__ */ ((t) => (t.Outlined = "outlined", t.Plain = "plain", t.Underlined = "underlined", t.Filled = "filled", t.Solo = "solo", t.SoloInverted = "solo-inverted", t.SoloFilled = "solo-filled", t))(r || {}), u = /* @__PURE__ */ ((t) => (t.Military = "military", t.Normal = "normal", t))(u || {}), i = /* @__PURE__ */ ((t) => (t.Accepted = "The :attribute must be accepted.", t.Array = "The :attribute must be an array.", t.BetweenArray = "The :attribute must have between :min and :max items.", t.BetweenFile = "The :attribute must be between :min and :max kilobytes.", t.BetweenNumeric = "The :attribute must be between :min and :max.", t.BetweenString = "The :attribute must be between :min and :max characters.", t.Boolean = "The :attribute field must be true or false.", t.Confirmed = "The :attribute confirmation does not match.", t.Decimal = "The :attribute must have :decimal decimal places.", t.Declined = "The :attribute must be declined.", t.Different = "The :attribute and :other must be different.", t.Digits = "The :attribute must be :digits digits.", t.DigitsBetween = "The :attribute must be between :min and :max digits.", t.DoesntEndWith = "The :attribute may not end with one of the following: :values.", t.DoesntStartWith = "The :attribute may not start with one of the following: :values.", t.Email = "The :attribute must be a valid email address.", t.EndsWith = "The :attribute must end with one of the following: :values.", t.File = "The :attribute must be a file.", t.In = "The selected :attribute is invalid.", t.InArray = "The :attribute field does not exist in :other.", t.Integer = "The :attribute must be an integer.", t.Lowercase = "The :attribute must be lowercase.", t.MaxArray = "The :attribute must not have more than :max items.", t.MaxFile = "The :attribute must not be greater than :max kilobytes.", t.MaxNumeric = "The :attribute must not be greater than :max.", t.MaxString = "The :attribute must not be greater than :max characters.", t.MaxDigits = "The :attribute must not have more than :max digits.", t.MinArray = "The :attribute must have at least :min items.", t.MinFile = "The :attribute must be at least :min kilobytes.", t.MinNumeric = "The :attribute must be at least :min.", t.MinString = "The :attribute must be at least :min characters.", t.MinDigits = "The :attribute must have at least :min digits.", t.MultipleOf = "The :attribute must be a multiple of :value.", t.NotIn = "The selected :attribute is invalid.", t.NotRegex = "The :attribute format is invalid.", t.Numeric = "The :attribute must be a number.", t.Regex = "The :attribute format is invalid.", t.Required = "The :attribute field is required.", t.RequiredIf = "The :attribute field is required when :other is :value.", t.RequiredUnless = "The :attribute field is required unless :other is in :values.", t.RequiredWith = "The :attribute field is required when :values is present.", t.RequiredWithAll = "The :attribute field is required when :values are present.", t.RequiredWithout = "The :attribute field is required when :values is not present.", t.RequiredWithoutAll = "The :attribute field is required when none of :values are present.", t.Same = "The :attribute and :other must match.", t.StartsWith = "The :attribute must start with one of the following: :values.", t.String = "The :attribute must be a string.", t.Uppercase = "The :attribute must be uppercase.", t.Ulid = "The :attribute must be a valid ULID.", t.Uuid = "The :attribute must be a valid UUID.", t))(i || {}), h = /* @__PURE__ */ ((t) => (t.In = "is_in", t))(h || {});
export {
  e as D,
  r as T,
  i as V,
  u as a,
  h as b
};
